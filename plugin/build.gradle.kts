/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.13/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`
    `kotlin-dsl`
    id("javaformat")
    alias(libs.plugins.gradlePluginPublish)
}

group = "dev.hhos.tools"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation(libs.springjavaformat)

    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)
    testImplementation(libs.assertj.core)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

gradlePlugin {
    website = "https://github.com/nisaldb/clean-spring"
    vcsUrl = "https://github.com/nisaldb/clean-spring"

    // Define the plugin
    val cleanSpring by plugins.creating {
        id = "dev.hhos.tools.cleanspring"
        implementationClass = "dev.hhos.tools.CleanSpringPlugin"
        displayName = "A plugin to ensure spring coding style"
        description = """
            |This plugin will automatically apply 
            |required gradle plugins to enforce the spring coding style""".trimMargin()
        tags = listOf("spring", "spring-boot", "coding style")
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

gradle.taskGraph.whenReady {
    if (hasTask(":plugin:publishPlugins")) {
        check(cmd("git", "diff", "--quiet", "--exit-code").isSuccess) {
            "Working tree is dirty"
        }
        val versionProcess = cmd("git", "describe", "--exact-match")
        check(versionProcess.isSuccess) { "Version is not tagged" }
        version = versionProcess.text.trim().removePrefix("v")
    }
}

fun cmd(vararg cmdAndArgs: String) =
    providers.exec {
        isIgnoreExitValue = true
        commandLine(*cmdAndArgs)
    }

val ExecOutput.text: String
    get() = standardOutput.asText.get()

val ExecOutput.isSuccess: Boolean
    get() = result.get().exitValue == 0